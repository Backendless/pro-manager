<xml xmlns="http://www.w3.org/1999/xhtml"><block type="custom_function_root_ui" id="tNclsOpTY0,Q@~bp2fZ5" deletable="false" x="20" y="50"><mutation output="true"><arg name="serviceName"></arg><arg name="podName"></arg><arg name="host"></arg></mutation><field name="name">openSocketServices</field><value name="output"><block type="custom_js_code" id="IPF|Y|^!Q1oO})zyAp;i"><mutation output="true"><arg arg-name="serviceName"></arg><arg arg-name="podName"></arg><arg arg-name="host"></arg><code>"  const io = await BackendlessUI.requireModule('https://cdn.jsdelivr.net/npm/socket.io-client@4.4.0/dist/socket.io.min.js')\n  socket = io.connect(`${host}`, { transports : ['websocket'] })\n  const output = document.querySelector('.ServerLogs__ContentLogs')\n  const outputWrap = document.querySelector('.ServerLogs__ContentWrapper')\n  \n  \n  if(output) {\n    output.innerText = ''\n  }\n  \n  logOriginalText = '';\n  logFileText = ''\n\n  const itemsBuffer = []\n\n  function throttle(cb, delay) {\n    let wait = false\n    let storedArgs = null\n\n    function checkStoredArgs() {\n      if (storedArgs == null) {\n        wait = false\n      } else {\n        cb(...storedArgs)\n        storedArgs = null\n        setTimeout(checkStoredArgs, delay)\n      }\n    }\n\n    return (...args) =&gt; {\n      if (wait) {\n        storedArgs = args\n        return\n      }\n\n      cb(...args)\n      wait = true\n      setTimeout(checkStoredArgs, delay)\n    }\n  }\n  \n  function insertBr (str) {\n    const regex = /\\n/g;\n    return str.replace(regex, '&lt;br&gt;');\n  }\n\n  if(output) {\n    const lazyMessageReceiver = throttle(() =&gt; {\n\n      output.innerText += `${ itemsBuffer.join('') }`\n      itemsBuffer.length = 0\n      if(!logStopFollow) {\n        outputWrap.scrollTop = outputWrap.scrollHeight\n      }\n    }, 100)\n    \n    socket.on(`${ serviceName }-log`, function (data) {\n      \n      logFileText = logFileText + data;\n      let dataWithBr = insertBr(data);\n      logOriginalText = logOriginalText + dataWithBr;\n\n      itemsBuffer.push(data)\n\n      lazyMessageReceiver()\n\n    })\n  \n    socket.emit ('service-logs:subscribe', {\n      \"serviceName\":`${serviceName}`,\n      \"podName\":`${podName}`,\n      \"channelName\": `${serviceName}-log`\n    });\n    \n    return socket\n  }\n"</code></mutation><field name="name">getSocketServicesData</field><value name="serviceName"><block type="custom-function_context_blocks_0" id="eJ|t)B`ny;-!N$ZR[WnC" bl_meta="{&quot;label&quot;:&quot;serviceName&quot;}"></block></value><value name="podName"><block type="custom-function_context_blocks_1" id="qG^*:,D/Qaw4;f!#D3!8" bl_meta="{&quot;label&quot;:&quot;podName&quot;}"></block></value><value name="host"><block type="custom-function_context_blocks_2" id="Dj#rt?LznxC:DSq~@hDD" bl_meta="{&quot;label&quot;:&quot;host&quot;}"></block></value></block></value></block></xml>